#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{color}

\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}
\lstset{ %
  basicstyle=\footnotesize,       % the size of the fonts that are used for the code
  breakatwhitespace=false,        % sets if automatic breaks should only happen at whitespace
  breaklines=true,                % sets automatic line breaking
  captionpos=b,                   % sets the caption-position to bottom
  commentstyle=\color{dkgreen},   % comment style
  escapeinside={\%*}{*)},         % if you want to add LaTeX within your code
  keywordstyle=\color{blue},      % keyword style
  language=C,                     % the language of the code
  numbers=left,                   % where to put the line-numbers; possible values are (none, left, right)
  numberstyle=\tiny\color{gray},  % the style that is used for the line-numbers
  stringstyle=\color{mauve},      % string literal style
  tabsize=2,                      % sets default tabsize to 2 spaces
  xleftmargin=12pt,          % left margin
  frame=leftline
}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing onehalf
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 1.5cm
\bottommargin 2cm
\headheight 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
RTDSP Lab 4
\end_layout

\begin_layout Author
Yong Wen Chua (ywc110) & Ryan Savitski (rs5010)
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Matlab Filter Design
\end_layout

\begin_layout Standard
The transition band used in this lab is between 260 Hz and 450 Hz, and between
 2250 Hz and 2500 Hz.
 The Matlab code used to generate the listing is given in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Matlab-Code-for"

\end_inset

.
\end_layout

\begin_layout Subsection
Coefficients
\end_layout

\begin_layout Standard
The coefficients generated by the Order 87 filter (with 88 coefficients)
 used is given by:
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "fir_coef.txt"

\end_inset


\end_layout

\begin_layout Subsection
Frequency Response
\end_layout

\begin_layout Standard
The frequency response of the generated filter is given on the following
 page.
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset External
	template PDFPages
	filename figure.pdf
	rotateAngle 90

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Non-Circular-Buffer-FIR"

\end_inset

Non-Circular Buffer FIR Filter
\end_layout

\begin_layout Standard
The code for the non-circular buffer FIR filter is given in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Non-circular-buffer"

\end_inset

.
\end_layout

\begin_layout Subsection
Code Description
\end_layout

\begin_layout Standard
The coefficients for the filter is kept in a global 
\family typewriter
double
\family default
 array with the name 
\family typewriter
b
\family default
.
 An array of size 88, 
\family typewriter
buffer
\family default
, is used as the storage for the previous inputs, required for the convolution.
 At the start of every ISR, the sample is first read from the input port.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Int16 sample = mono_read_16Bit();	// read
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The buffer is then updated as though it's a shift register.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// Handle the buffer 	  
\end_layout

\begin_layout Plain Layout

for (i = N-1; i > 0; i--) 	  	
\end_layout

\begin_layout Plain Layout

	buffer[i] = buffer[i-1];
\end_layout

\begin_layout Plain Layout

buffer[0] = sample;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Finally, the convolution is done by a call to the 
\family typewriter
convoluteNonCircular
\family default
 function and the output is written to.
 The convolution is done simply according to the following equation
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
output=\sum_{i=0}^{87}b[i]\times buffer[i]
\]

\end_inset


\end_layout

\begin_layout Standard
and is implemented in code as below:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

for (i = 0; i < N; i++)
\end_layout

\begin_layout Plain Layout

	output += b[i] * buffer[i];
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Oscilloscpe Traces
\end_layout

\begin_layout Standard
The oscilloscope trace of the filter implemented on the DSP behave as expected
 with the amplitude changing accordingly.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename prints/1/TEK0000.JPG

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
200 Hz input, with almost zero output.
 This is in the stopband.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename prints/1/TEK0001.JPG

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
400 Hz input, with increasing output amplitude.
 This is in the first transition band.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename prints/1/TEK0002.JPG

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
500 Hz input, with maximum output amplitude.
 This is within the passband.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename prints/1/TEK0003.JPG

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
1500 Hz input, with maximum amplitude.
 This is within the passband.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename prints/1/TEK0004.JPG

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
2400 Hz, with decreasing amplitude.
 This is within the second transition band.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename prints/1/TEK0005.JPG

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
3000 Hz input, with zero output.
 This is within the second stopband.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Code Performance
\end_layout

\begin_layout Standard
The number of cycles taken between the start, and the end of the ISR routine
 is given in the table below.
 The number given is the lowest number of clock cycles observed.
 The number might vary due to cache hits and/or misses.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Optimisation Level
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of Clock Cycles
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5825
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Level 0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4829
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Level 2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1719
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The time taken for the functions 
\family typewriter
mono_read_16Bit(),
\family default
 and 
\family typewriter
mono_write_16Bit()
\family default
 were also recorded, and is shown in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:The-number-of"

\end_inset

.
 These number of cycles do not vary with the type of buffer used as the
 functions are independent of the buffer used.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Optimisation Level
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mono_read_16Bit()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mono_write_16Bit()
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
110
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
67
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Level 0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
109
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
53
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Level 2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
77
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
48
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:The-number-of"

\end_inset

The number of cycles for the functions 
\family typewriter
mono_read_16Bit(),
\family default
 and 
\family typewriter
mono_write_16Bit()
\family default
 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Circular Buffer FIR Filter
\end_layout

\begin_layout Subsection
Naive Implementation
\end_layout

\begin_layout Standard
A simple version of the circular buffer was first implemented to ensure
 that it worked correct.
 The code listing can be found in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Naive-Implementation-for"

\end_inset

.
 Its operations are explained in the next section.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Code-Description"

\end_inset

Code Description
\end_layout

\begin_layout Standard
A variable 
\begin_inset Quotes eld
\end_inset


\family typewriter
index
\family default

\begin_inset Quotes erd
\end_inset

 is used to indicate the position in the array at which the 
\begin_inset Quotes eld
\end_inset

current
\begin_inset Quotes erd
\end_inset

 sample should reside.
 This 
\family typewriter
index
\family default
 is incremented after every new sample is obtained, eventually wrapping
 around to the front of the array.
 Thus, if the current index is of value 
\begin_inset Formula $i$
\end_inset

, then the previous nth sample will be given by the index value of 
\begin_inset Formula $[(i-n)+N]\%N$
\end_inset

 where 
\begin_inset Formula $N=88$
\end_inset

 is the total number of coefficients.
 The array, and 
\family typewriter
index
\family default
 are defined by
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Int16 buffer[N] = {0}; // initialise everything to zero
\end_layout

\begin_layout Plain Layout

int index = 0;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The newly retrieved sample will first be written to the buffer.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

*(buffer + index) = input; // equivalent to, and no faster than writing
 buffer[index] = input
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A loop is then started to perform the Multiply and Accumulate (MAC) operation
 and the result is stored in 
\family typewriter
result
\family default
.
 Proper circular offet buffering is calculated using the method described
 earlier in this section.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

for (i = 0; i < N; i++)
\end_layout

\begin_layout Plain Layout

	result += b[i]* buffer[ ((index-i) + N) % N];
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The index is then incremented.
 The mod operator ensures that proper wrapping around occurs.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

index = (index + 1)%N;
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Code Performance
\end_layout

\begin_layout Standard
The number of cycles taken between the start, and the end of the ISR routine
 is given in the table below.
 The number given is the lowest number of clock cycles observed.
 The number might vary due to cache hits and/or misses.
 In general, this implementation of the buffer performed worse than the
 Non-Circular buffer version described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sec:Non-Circular-Buffer-FIR"

\end_inset

.
 This is because the modulus operator is an expensive operation, and will
 be optimised in the next section.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Optimisation Level
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of Clock Cycles
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7377
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Level 0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5830
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Level 2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3934
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Optimised Implementation
\end_layout

\begin_layout Standard
The code listing for the optimised implementation can be found in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Optimised-Circular-Buffer"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Code Operation
\end_layout

\begin_layout Standard
The code for the convolution was moved into the ISR routine, yielding negligible
 performance gains, but allowing for more optimisation to take place.
\end_layout

\begin_layout Standard
Similar to the code operation described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Code-Description"

\end_inset

, a variable 
\begin_inset Quotes eld
\end_inset


\family typewriter
index
\family default

\begin_inset Quotes erd
\end_inset

 is used to indicate the position in the array at which the 
\begin_inset Quotes eld
\end_inset

current
\begin_inset Quotes erd
\end_inset

 sample should reside.
 This 
\family typewriter
index
\family default
 is decremented after every new sample is obtained, eventually wrapping
 around to the front of the array.
 Thus, if the current index is of value 
\begin_inset Formula $i$
\end_inset

, then the previous nth sample will be given by the index value of 
\begin_inset Formula $(i+n)\%N$
\end_inset

 where 
\begin_inset Formula $N=88$
\end_inset

 is the total number of coefficients.
 The varaibles are declared in the same way as in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Code-Description"

\end_inset

.
 
\end_layout

\begin_layout Standard
Pointers are used to point to the appropriate values in the arrays for use
 during the MAC loop.
 This improves the performance of the code slightly, as offset addresses
 do not have to be calculated at the point of pointer dereference.
 Thus, at the start of the ISR routine, the following pointers are set up.
 
\family typewriter
i
\family default
 is a pointer to the first element in the coefficients and 
\family typewriter
bEnd
\family default
 is the pointer to one element after the end of the coefficient array.
 
\family typewriter
offset
\family default
 is a pointer to the current entry in the 
\family typewriter
buffer
\family default
 array to be written to, and 
\family typewriter
buffe
\family default
rEnd is a pointer to one element after the end of the 
\family typewriter
buffer
\family default
 array.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

double *i = b; 	
\end_layout

\begin_layout Plain Layout

double *bEnd = b + N;	// one after last element 	
\end_layout

\begin_layout Plain Layout

double *offset = buffer + index; 	
\end_layout

\begin_layout Plain Layout

double *bufferEnd = buffer + N; // one after last element
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The result is then read and written to the 
\family typewriter
b
\family default
uffer.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

*offset = mono_read_16Bit();	// read and write to current "zero" sample
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The MAC loop then takes place.
\end_layout

\begin_layout Standard
Another way to implement circular buffering is to use 
\family typewriter
if/else
\family default
 tests to see if the index of the array is below zero, or after the last
 element.
 However, these tests are expensive.
 It can be noted that the 
\family typewriter
for
\family default
 loop already does its own tests for an index during an iteration.
 The check necessary for circular buffering can thus be integrated with
 the index check of a 
\family typewriter
for
\family default
 loop.
 To acheive circular buffering without 
\family typewriter
if/else
\family default
 tests, two separate 
\family typewriter
for
\family default
 loops are implemented.
\end_layout

\begin_layout Standard
The first 
\family typewriter
for
\family default
 loop will perform the MAC for all entries in the 
\family typewriter
buffer
\family default
 between the current entry up to, and including, the last entry in the 
\family typewriter
buffer
\family default
 (since the older entries have indices larger than the current entry).
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

for (; offset < bufferEnd; ++i, ++offset) 		
\end_layout

\begin_layout Plain Layout

	result += (*i) * (*offset);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
offset
\family default
 variable is then reset to the beginning of the 
\family typewriter
buffer
\family default
, and is looped until the necessary number of coefficients have been multiplied
 (with the check performed against 
\family typewriter
bEnd
\family default
).
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 for (offset = buffer; i < bEnd; ++i, ++offset)
\end_layout

\begin_layout Plain Layout

        result += (*i) * (*offset);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The index is then decremented using an 
\family typewriter
if/else 
\family default
check.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

index = (index == 0) ? N-1 : index-1;
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Code Performance
\end_layout

\begin_layout Standard
The number of cycles taken between the start, and the end of the ISR routine
 is given in the table below.
 The number given is the lowest number of clock cycles observed.
 The number might vary due to cache hits and/or misses.
 In general, this implementation gives massive improvement in terms of performan
ce.
 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Optimisation Level
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of Clock Cycles
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4526
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Level 0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2898
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Level 2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
746
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Spectrum Analyser Output
\end_layout

\begin_layout Standard
The output for the spectrum analyser is given in the figures below.
 Due to the input being fed to only one channel on the DSP, along with the
 potential divider in the circuitry, the value 
\begin_inset Quotes eld
\end_inset

seen
\begin_inset Quotes erd
\end_inset

 by the DSP will be one-fourth of what was provided by the analyser.
 This leads to an approximate -12 dB gain for the output in the frequency
 response.
 The figures given below have the necessary offset to reflect this.
 The phase is also roughly linear during in the passband.
\end_layout

\begin_layout Section
Assembly Implementation
\end_layout

\begin_layout Standard
An implementation of the MAC operation was done in assembly.
 The code for the C file that calls the assembly function is given in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:C-File"

\end_inset

.
 The ISR routine simply reads the sample from the output, calls the assembly
 function and writes the output.
 A buffer size of 1024 bytes was used.
 This is because there are 88 entries in the buffer, and 88 entries require
 
\begin_inset Formula $88\times\frac{64}{8}=704$
\end_inset

 bytes of space.
 When rounded up to the nearest power of two, we get 1024.
 
\end_layout

\begin_layout Standard
Two versions of the assembly function were implemented, and will be detailed
 later in this section.
\end_layout

\begin_layout Subsection
Linear Implementation
\end_layout

\begin_layout Standard
An assembly implementation of the MAC operation without any parallelism
 was implemented to test the output.
 
\end_layout

\begin_layout Standard
The code listing can be found in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Linear-Assembly-Implementation"

\end_inset

.
 In the comments to the code, the numbers in brackets after the code indicate
 the number of delay slots required after the instruction is sent to 
\family typewriter
E1
\family default
 stage of the pipeline before its results can be used.
 For floating point instructions, a second number will indicate the number
 of latency cycles afte the 
\family typewriter
E1
\family default
 stage of the pipeline before the functional unit can execute another instructio
n.
\end_layout

\begin_layout Subsubsection
Code Operation
\end_layout

\begin_layout Standard
The structure of the code before, and after the MAC loop is generally the
 same as the assembly code provided.
 The 
\family typewriter
AMR
\family default
 register is set to have a value of 
\family typewriter
0x90004
\family default
, which sets the register 
\family typewriter
A5 
\family default
to use circular buffering with a block size of 1024 bytes.
 The MAC loop then simply consists of code to load the sample data and the
 coefficients, mulitply them together, and finally add them to an accumulator.
 The straightforward loop code is given below:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={[x86masm]Assembler},morekeywords={MVC, MVK, MVKLH, LDDW, LDW, STW, ZERO, MV, SUB, B, MPYDP, ADDDP}"
inline false
status open

\begin_layout Plain Layout

	LDDW .D1		*A5++, A11:A10 ; (4) loads the (delayed) sample into A11:A10,
 and post increment pointer	
\end_layout

\begin_layout Plain Layout

||	LDDW .D2		*B4++, B11:B10 ; (4) load the coefficient into B11:B10, and
 post increment pointer
\end_layout

\begin_layout Plain Layout

	NOP	4 		
\end_layout

\begin_layout Plain Layout

	MPYDP .M1X		A11:A10, B11:B10, A11:A10	; (9, 4) DP multiply 		
\end_layout

\begin_layout Plain Layout

	NOP 9 		
\end_layout

\begin_layout Plain Layout

	ADDDP .L1		A15:A14, A11:A10, A15:A14	; (6, 2) DP ADD 		
\end_layout

\begin_layout Plain Layout

	NOP 6
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the first execute packet of the loop, the coefficient and the sample
 are loaded into their respective registers (
\family typewriter
A11:A10
\family default
, and 
\family typewriter
B11:B10
\family default
) in parallel using the
\family typewriter
 D
\family default
 units on both sides.
 4 delay slots are required before the results can be used.
 The values are then multiplied using the 
\family typewriter
MPYDP
\family default
 instruction, which uses the 
\family typewriter
M1
\family default
 unit, and utilises the cross path (thus the 
\family typewriter
.M1X
\family default
).
 9 delay slots are required before the results are added using 
\family typewriter
ADDDP
\family default
.
 Then, a further six delay slots are required before the loop begins again.
\end_layout

\begin_layout Subsubsection
Code Performance
\end_layout

\begin_layout Standard
The number of cycles taken between the start, and the end of the ISR routine
 is given in the table below.
 The number given is the lowest number of clock cycles observed.
 The number might vary due to cache hits and/or misses.
 The C code in this case do not change much through the various optimisation
 level.
 This is because the compiler does not optimise the assembly code, and the
 assembly code has a constant number of clock cycles.
 This linear and straightforward implementation of the MAC operation in
 assembly actually performs worse than the Non-Circular Buffer implemented
 in C at higher levels of optimisation.
 This is because at higher levels of optimisation, the compiler will attempt
 to optimise using techniques such as software pipelining.
 This will be further discussed in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sec:Compiler-Optimisation"

\end_inset

.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Optimisation Level
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of Clock Cycles
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Assembly Code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2736
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2589
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Level 0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2736
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Level 2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2730
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Optimised Implementation
\end_layout

\begin_layout Standard
Various techniques can be employed to optimise the assembler code and shave
 the number of cycles required by five times.
 The techniques will be described in this section.
 The code listing can be found in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Optimised-Assembly-Implementatio"

\end_inset

.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Optimisation-Techniques"

\end_inset

Optimisation Techniques
\end_layout

\begin_layout Standard
There are various techniques that can be employed to take advantage of the
 VLIW architecture of the DSP hardware.
 This mostly include exploiting the ability to schedule multiple instructions
 that utilise different functional units to be executed in parallel, and
 also to understand how the pipeline works for the various instructions
 so as to interleave instructions.
\end_layout

\begin_layout Standard
Double precision (DP) instructions are the first area for optimisation.
 The delay slots between two consecutive DP instructions where the second
 instruction makes use of the result from the first instruction could be
 reduced by one (for example 
\family typewriter
MPYDP
\family default
 followed by 
\family typewriter
ADDDP
\family default
).
 This is because the DP instructions write the lower half of the results
 to the register first, before writing the upper half of the results to
 the register in the final delay slot.
 DP instructions that read the lower half results first in 
\family typewriter
E1,
\family default
 followed by the upper half in 
\family typewriter
E2
\family default
 can be scheduled to start executing in the final delay slot of the previous
 DP instruction.
 Thus, the number of delay slots between 
\family typewriter
MPYDP
\family default
 followed by 
\family typewriter
ADDDP
\family default
 can be reduced from 9 to 8.
\end_layout

\begin_layout Standard
Utilising multiple functional units on both sides is the second area for
 optimisation.
 This works, so long as the operations do not write to the same registers
 in the same cycle.
 There is also a need to be careful to not read more than four registers
 in the same register file in the same execute packet.
 Thus, two 
\family typewriter
MPYDP
\family default
 and 
\family typewriter
ADDDP
\family default
 operations can take place in parallel utilising both of the functional
 units.
 This can roughly half the number of cycles required for the code to run,
 but does, however, require twice the number of registers required.
\end_layout

\begin_layout Standard
Software pipelining for loops is the third area for optimisation.
 Software pipelining is analogous to hardware pipelining where multiple
 instructions are interleaved so that the functional units can be maximally
 utilised during their delay slots, subject to their latencies, if any.
 Software pipelining, along with loop unrolling are techniques used by compilers
 to optimise code.
 This will be examined in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sec:Compiler-Optimisation"

\end_inset

.
 In software pipelining, the pipeline is first primed using a pipeline prologue.
 The main loop kernel is then executed for the required number of times,
 with several loop cycles unrolled to execute interleaved.
 Then, the loop epilogue will finish up any outstanding tasks.
 This technique can roughly reduce the number of cycles by a factor roughly
 equivalent to the number of times the loop is unrolled, but requires proper
 planning and tracking.
\end_layout

\begin_layout Standard
Finally, taking advantage of the branch delay slots can also reduce the
 numbers of cycles in a non-trivial manner.
 The branch instruction requires five delay slots afterwards, whether the
 branch is taken or not.
 Those five execute packets are guaranteed to execute, and thus code can
 be executed during those execute packets.
 
\end_layout

\begin_layout Standard
These techniques are employed in the code implementation, to be explained
 later on in this section.
\end_layout

\begin_layout Subsubsection
Code Operation
\end_layout

\begin_layout Standard
The assembly function first starts off by setting the AMR register is set
 to have a value of 
\family typewriter
0x90004
\family default
, which sets the register 
\family typewriter
A5 
\family default
to use circular buffering with a block size of 1024 bytes.
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={[x86masm]Assembler},morekeywords={MVC, MVK, MVKLH, LDDW, LDW, STW, ZERO, MV, SUB, B, MPYDP, ADDDP}"
inline false
status open

\begin_layout Plain Layout

		; set circular mode using the AMR
\end_layout

\begin_layout Plain Layout

		MVC .S2			AMR,B13		;(0) Save contents of AMR reg to B13
\end_layout

\begin_layout Plain Layout

		MVK .S2			4H,B2 		;(0) Lower half.
 set A5 to be circular buffering addressing mode using BK0
\end_layout

\begin_layout Plain Layout

		MVKLH .S2		9H,B2 		;(0) Upper half.
 Set BK0 to work for 1024 bytes
\end_layout

\begin_layout Plain Layout

		MVC .S2			B2,AMR		;(0) set AMR reg 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The sample that is just read is then loaded by deferencing its address pointer,
 along with the address of the circular buffer by dereferencing its address
 pointer.
 At the same time, some registers are moved out of the way to prepare for
 the MAC loop.
 The register usage is described in the comments in the listing in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Optimised-Assembly-Implementatio"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={[x86masm]Assembler},morekeywords={MVC, MVK, MVKLH, LDDW, LDW, STW, ZERO, MV, SUB, B, MPYDP, ADDDP}"
inline false
status open

\begin_layout Plain Layout

        LDDW .D1          *A6,A9:A8    ;(4) Get the 64 bit data for read_samp
 put it in A9:A8
\end_layout

\begin_layout Plain Layout

    ||  MV .S2X           A8, B0      ;(0) move parameter (numCoefs) passed
 from C into b0
\end_layout

\begin_layout Plain Layout

        LDW .D1           *A4,A5        ;(4) Get the address of the circ_ptr,
 dereference then place in 
\end_layout

\begin_layout Plain Layout

    ||  MV .S2            B3, B1        ;(0) move return to C address
\end_layout

\begin_layout Plain Layout

        MV .S2            B6, B5        ;(0) move &filtered_samp
\end_layout

\begin_layout Plain Layout

        NOP 3                        ; A5 now holds address pointing into
 delay_circ
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The sample is then stored into the buffer, and the registers used as the
 accumulators for the MAC loop is first zeroed.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={[x86masm]Assembler},morekeywords={MVC, MVK, MVKLH, LDDW, LDW, STW, ZERO, MV, SUB, B, MPYDP, ADDDP}"
inline false
status open

\begin_layout Plain Layout

        STW .D1           A9,*--A5    ;(0) Store new input sample (MSB) to
 delay_circ array
\end_layout

\begin_layout Plain Layout

    ||  ZERO .S1          A0            ;(0) zero accumulator LSB
\end_layout

\begin_layout Plain Layout

    ||  ZERO .S2          B2
\end_layout

\begin_layout Plain Layout

        STW .D1           A8,*--A5     ;(0) Store new input sample (LSB)
 to delay_circ array 
\end_layout

\begin_layout Plain Layout

    ||  ZERO .S1          A1            ;(0) zero accumulator MSB
\end_layout

\begin_layout Plain Layout

    ||  ZERO .S2          B3
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Finally, the address for the next sample read from the input to is written
 back to the memory location pointed by 
\family typewriter
A4
\family default
.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={[x86masm]Assembler},morekeywords={MVC, MVK, MVKLH, LDDW, LDW, STW, ZERO, MV, SUB, B, MPYDP, ADDDP}"
inline false
status open

\begin_layout Plain Layout

        STW .D1           A5,*A4       ;(0) write back the decremented pointer
 to circ_ptr 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The loop prologue, described in as part of the software pipeline is then
 primed to load the first two sets of sample values and coefficients into
 the respective registers so as to perform two MAC operations in parallel
 to separate accumulators.
 The 
\family typewriter
LDDW
\family default
 instructions for each pair of values are loaded in the same execute packet,
 and the next pair of values are loaded in the subsequent execute packet.
 The instruction requires four delays slots before the registers are fully
 written.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={[x86masm]Assembler},morekeywords={MVC, MVK, MVKLH, LDDW, LDW, STW, ZERO, MV, SUB, B, MPYDP, ADDDP}"
inline false
status open

\begin_layout Plain Layout

        ;********************************** loop prologue **********************
************
\end_layout

\begin_layout Plain Layout

        ; prime the pipeline
\end_layout

\begin_layout Plain Layout

       LDDW .D1          *A5++, A9:A8 ; (4) loads the (delayed) sample into
 A9:A8, and post increment pointer 
\end_layout

\begin_layout Plain Layout

   ||  LDDW .D2          *B4++, B9:B8 ; (4) load the coefficient into B9:B8,
 and post increment pointer 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

       LDDW .D1          *A5++, A11:A10 ; (4) loads the (delayed) sample
 into A11:A10, and post increment pointer
\end_layout

\begin_layout Plain Layout

   ||  LDDW .D2          *B4++, B11:B10 ; (4) load the coefficient into B11:B10,
 and post increment pointer 
\end_layout

\begin_layout Plain Layout

       NOP 4
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The loop kernel is then executed next.
 The loop kernel will be executed 
\begin_inset Formula $N$
\end_inset

 number of times, where 
\begin_inset Formula $N$
\end_inset

 is the number of coefficients provided by the caller in C.
 In one execute packet, the kernel first attempts to multiply the two pairs
 of values loaded in the previous loop cycle (or in the loop prologue).
 It also performs a decrement of the loop counter by two.
 The 
\family typewriter
MPYDP
\family default
 requires 8 delay slots (one less than 9, as described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Optimisation-Techniques"

\end_inset

).
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={[x86masm]Assembler},morekeywords={MVC, MVK, MVKLH, LDDW, LDW, STW, ZERO, MV, SUB, B, MPYDP, ADDDP}"
inline false
status open

\begin_layout Plain Layout

        ; ************************* loop kernel     ****************************
 
\end_layout

\begin_layout Plain Layout

       MPYDP .M1X        A9:A8, B9:B8, A3:A2    ; (9, 4) DP multiply 
\end_layout

\begin_layout Plain Layout

   ||  MPYDP .M2X        B11:B10, A11:A10, B7:B6    ; (9, 4) DP multiply
 
\end_layout

\begin_layout Plain Layout

   ||  SUB .S2           B0,2,B0            ; (0) b0 - 2 -> b0    
\end_layout

\end_inset


\end_layout

\begin_layout Standard
After three execute packets with 
\family typewriter
NOPs
\family default
, there are exactly five execute packets in the kernel, and thus the conditional
 branch instruction is executed.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={[x86masm]Assembler},morekeywords={MVC, MVK, MVKLH, LDDW, LDW, STW, ZERO, MV, SUB, B, MPYDP, ADDDP}"
inline false
status open

\begin_layout Plain Layout

        NOP 3
\end_layout

\begin_layout Plain Layout

        [B0] B .S2             loop            ; (5) loop back if b0 is not
 zero
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The next two pairs of values are then loaded.
 These 
\family typewriter
LDDW
\family default
 instructions can actually be scheduled in the execute packet right after
 the 
\family typewriter
MPYDP
\family default
 instruction as they write to the registers only on the fourth delay slot,
 but doing so would not change the number of cycles as the 
\family typewriter
MPYDP
\family default
 still needs 8 delay slots.
 The delay slot requirements of these LDDW instructions will be met by the
 time the values are used again in the next loops's 
\family typewriter
MPYDP 
\family default
instructions.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={[x86masm]Assembler},morekeywords={MVC, MVK, MVKLH, LDDW, LDW, STW, ZERO, MV, SUB, B, MPYDP, ADDDP}"
inline false
status open

\begin_layout Plain Layout

   ||  [B0] LDDW .D1     *A5++, A9:A8 ; (4) loads the (delayed) sample into
 A9:A8, and post increment pointer 
\end_layout

\begin_layout Plain Layout

   ||  [B0] LDDW .D2     *B4++, B9:B8 ; (4) load the coefficient into B9:B8,
 and post increment pointer 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

       [B0] LDDW .D1     *A5++, A11:A10 ; (4) loads the (delayed) sample
 into A11:A10, and post increment pointer 
\end_layout

\begin_layout Plain Layout

   ||  [B0] LDDW .D2     *B4++, B11:B10 ; (4) load the coefficient into B11:B10,
 and post increment pointer
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Three more 
\family typewriter
NOPs
\family default
 are then performed to meet 
\family typewriter
MPYDP's
\family default
 delay slots requirement, and then the various accumulators are added.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={[x86masm]Assembler},morekeywords={MVC, MVK, MVKLH, LDDW, LDW, STW, ZERO, MV, SUB, B, MPYDP, ADDDP}"
inline false
status open

\begin_layout Plain Layout

       ADDDP .L1         A1:A0, A3:A2, A1:A0    ; (6, 2) DP ADD 
\end_layout

\begin_layout Plain Layout

   ||  ADDDP .L2         B3:B2, B7:B6, B3:B2    ; (6, 2) DP ADD    
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The epilogue of the loop is now performed.
 Five delay slots (one less than required, with similar reasons as 
\family typewriter
MPYDP
\family default
) are inserted for the final 
\family typewriter
ADDDP
\family default
 instruction to complete execution before adding the two accumulators up.
 Five 
\family typewriter
NOPs
\family default
 are added for 
\family typewriter
ADDDP
\family default
 to complete.
 This is, again, one less than required because the lower half of the result
 will be used first later on.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={[x86masm]Assembler},morekeywords={MVC, MVK, MVKLH, LDDW, LDW, STW, ZERO, MV, SUB, B, MPYDP, ADDDP}"
inline false
status open

\begin_layout Plain Layout

        ;********************************** loop epilogue **********************
************
\end_layout

\begin_layout Plain Layout

        ; add both accumulators up
\end_layout

\begin_layout Plain Layout

        NOP 5        ; for the final addition to be complete
\end_layout

\begin_layout Plain Layout

        ADDDP .L1X        A1:A0, B3:B2, A1:A0    ; (6, 2) DP ADD
\end_layout

\begin_layout Plain Layout

        NOP 5
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The results are written back to the address provided by the C caller, and
 the AMR register is restored before returning to C.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={[x86masm]Assembler},morekeywords={MVC, MVK, MVKLH, LDDW, LDW, STW, ZERO, MV, SUB, B, MPYDP, ADDDP}"
inline false
status open

\begin_layout Plain Layout

        ; send the result of MAC back to C
\end_layout

\begin_layout Plain Layout

        STW .D2            A0,*B5        ;(0) Write accumulator (LSB) into
 filtered_samp 
\end_layout

\begin_layout Plain Layout

        STW .D2            A1,*+B5[1]    ;(0) Write accumulator (MSB) into
 filtered_samp  
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

       ; restore previous buffering mode
\end_layout

\begin_layout Plain Layout

    ||  MVC .S2            B13,AMR        ;(0) restore  AMR reg to previous
 contents                      ; return to C code
\end_layout

\begin_layout Plain Layout

lend:   B .S2             B1            ; (5) branch to b1 (moved C return
 address)
\end_layout

\begin_layout Plain Layout

        NOP 5    
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Code Performance
\end_layout

\begin_layout Standard
The number of cycles taken between the start, and the end of the ISR routine
 is given in the table below.
 The number given is the lowest number of clock cycles observed.
 The number might vary due to cache hits and/or misses.
 The C code in this case do not change much through the various optimisation
 level.
 This is because the compiler does not optimise the assembly code, and the
 assembly code has a constant number of clock cycles.
 The optimisation technique discussed in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Optimisation-Techniques"

\end_inset

 provide massive improvement to the code performance, by five fold.
 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Optimisation Level
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of Clock Cycles
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Assembly Code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
633
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
494
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Level 0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
633
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Level 2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
648
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Spectrum Analyser Traces
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Compiler-Optimisation"

\end_inset

Compiler Optimisation
\end_layout

\begin_layout Section
Code Listings
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Matlab-Code-for"

\end_inset

Matlab Code for Filter Generation
\end_layout

\begin_layout Standard
Based on the specification given, the following Matlab code was used to
 generate the filter:
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "lab4.m"
lstparams "language=Matlab"

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Non-circular-buffer"

\end_inset

Non-Circular Buffer
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "RTDSP/non-circular.c"

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Naive-Implementation-for"

\end_inset

Naive Implementation for a Circular Buffer
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "naive-circular.c"

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Optimised-Circular-Buffer"

\end_inset

Optimised Circular Buffer Implementation
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "RTDSP/circular.c"

\end_inset


\end_layout

\begin_layout Subsection
Assembly Implementation
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:C-File"

\end_inset

C File
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "RTDSP/asm.c"

\end_inset


\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Linear-Assembly-Implementation"

\end_inset

Linear Assembly Implementation
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "assembly-linear.asm"
lstparams "language={[x86masm]Assembler},morekeywords={MVC, MVK, MVKLH, LDDW, LDW, STW, ZERO, MV, SUB, B, MPYDP, ADDDP}"

\end_inset


\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Optimised-Assembly-Implementatio"

\end_inset

Optimised Assembly Implementation
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "RTDSP/circ_FIR_DP.asm"
lstparams "language={[x86masm]Assembler},morekeywords={MVC, MVK, MVKLH, LDDW, LDW, STW, ZERO, MV, SUB, B, MPYDP, ADDDP}"

\end_inset


\end_layout

\end_body
\end_document
