#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{color}

\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}
\lstset{ %
  basicstyle=\footnotesize,       % the size of the fonts that are used for the code
  breakatwhitespace=false,        % sets if automatic breaks should only happen at whitespace
  breaklines=true,                % sets automatic line breaking
  captionpos=b,                   % sets the caption-position to bottom
  commentstyle=\color{dkgreen},   % comment style
  escapeinside={\%*}{*)},         % if you want to add LaTeX within your code
  keywordstyle=\color{blue},      % keyword style
  language=C,                     % the language of the code
  numbers=left,                   % where to put the line-numbers; possible values are (none, left, right)
  numberstyle=\tiny\color{gray},  % the style that is used for the line-numbers
  stringstyle=\color{mauve},      % string literal style
  tabsize=2,                      % sets default tabsize to 2 spaces
  xleftmargin=12pt,          % left margin
  frame=leftline
}
\lfoot{ywc110 \& rs5010}
\cfoot{}
\rfoot{\thepage}
\end_preamble
\use_default_options true
\begin_modules
figs-within-sections
tabs-within-sections
eqs-within-sections
customHeadersFooters
\end_modules
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format pdf5
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing onehalf
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 1.5cm
\bottommargin 2cm
\headheight 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
RTDSP Lab 4
\end_layout

\begin_layout Author
Yong Wen Chua (ywc110) & Ryan Savitski (rs5010)
\end_layout

\begin_layout Section*
Declaration
\end_layout

\begin_layout Standard
Declaration: We confirm that this submission is our own work.
 In it, we give references and citations whenever we refer to or use the
 published, or unpublished, work of others.
 We are aware that this course is bound by penalties as set out in the College
 examination offenses policy.
 
\end_layout

\begin_layout Standard
Signed:
\bar under
 Yong Wen Chua & Ryan Savitski
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Matlab Filter Design
\end_layout

\begin_layout Standard
The transition bands used in this lab are: 260 Hz -> 450 Hz and 2250 Hz
 -> 2500 Hz (choice was made before the spec was changed).
 The Matlab code used to generate the listing is given in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Matlab-Code-for"

\end_inset

.
\end_layout

\begin_layout Subsection
Coefficients
\end_layout

\begin_layout Standard
The coefficients generated by the Order 87 filter (with 88 coefficients)
 are given below.
 Note that the filter is linear phase and the coefficients are thus symmetric.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "fir_coef.txt"

\end_inset


\end_layout

\begin_layout Subsection
Frequency Response
\end_layout

\begin_layout Standard
The frequency response of the generated filter is given on the following
 page.
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename figure.png
	scale 90
	rotateAngle 90

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Non-Circular-Buffer-FIR"

\end_inset

Non-Circular Buffer FIR Filter
\end_layout

\begin_layout Standard
The code for the non-circular buffer FIR filter is given in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Non-circular-buffer"

\end_inset

.
\end_layout

\begin_layout Subsection
Code Description
\end_layout

\begin_layout Standard
The coefficients for the filter are kept in a global 
\family typewriter
double
\family default
 array with the name 
\family typewriter
b
\family default
.
 An array of size 88, 
\family typewriter
buffer
\family default
, is used as the storage for the previous inputs, required for the convolution.
 The code is inside the ISR and is presented below:At the start of every
 ISR, the buffer's contents are shifted:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int i; 	
\end_layout

\begin_layout Plain Layout

double output = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// shift buffer 	
\end_layout

\begin_layout Plain Layout

for (i = N-1; i != 0; --i)
\end_layout

\begin_layout Plain Layout

	buffer[i] = buffer[i-1];
\end_layout

\begin_layout Plain Layout

buffer[0] = mono_read_16Bit(); // new sample 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// mac loop 	
\end_layout

\begin_layout Plain Layout

for (i = 0; i < N; ++i)
\end_layout

\begin_layout Plain Layout

	output += b[i] * buffer[i];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

mono_write_16Bit(output);	// write
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The code starts by doing a left shift of the buffer, then reading a new
 sample and writing it into the start of the buffer.
 Then a convolution is performed with a mac loop.
 The convolution is done according to the following equation:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
output=\sum_{i=0}^{87}b[i]\times buffer[i]
\]

\end_inset


\end_layout

\begin_layout Standard
Finally, the sample is written to the output codec.
\end_layout

\begin_layout Subsection
Oscilloscope Traces
\end_layout

\begin_layout Standard
The oscilloscope trace of the filter implemented on the DSP behave as expected
 with the amplitude changing accordingly.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename prints/1/TEK0000.JPG

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
200 Hz input, with almost zero output.
 This is in the stop-band.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename prints/1/TEK0001.JPG

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
400 Hz input, with increasing output amplitude.
 This is in the first transition band.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename prints/1/TEK0002.JPG

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
500 Hz input, with maximum output amplitude.
 This is within the passband.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename prints/1/TEK0003.JPG

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
1500 Hz input, with maximum amplitude.
 This is within the passband.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename prints/1/TEK0004.JPG

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
2400 Hz, with decreasing amplitude.
 This is within the second transition band.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename prints/1/TEK0005.JPG

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
3000 Hz input, with zero output.
 This is within the second stop-band.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Code Performance
\end_layout

\begin_layout Standard
The number of cycles for the simple non-circular FIR part with overhead
 of sample read/write cycles, are given below.
 Note that the actual overhead cycle counts depend on both the optimisation
 level and how/if the compiler inlines the calls.
 In addition, the breakpoint insertion offsets make it hard to time the
 overhead of just the sample input/output operations.
 Therefore it is not sensible to present the results without the overheads
 included.
 The estimated overhead at o2/o3 is 130 cycles.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Optimisation Level
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Cycle count 
\bar under
with
\bar default
 read/write sample overhead
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5766
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
o0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4666
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
o1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3855
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
o2/o3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1584
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Note that seeing as this is a DSP board, the compiler toolchain is written
 to recognise mac-like loops and buffer operations, inserting templated
 assembly where needed.
 For example, for the above code the compiler did a triple in-flight branch
 shift loop that is much faster than the naive serial shifting.
 We are aware that simple mac loop code as above can also trigger a dual-unit
 pipelined template from the compiler at o2/o3 that would push the cycle
 counts towards 800, but we were unsuccessful in triggering that pattern.
 The compiler's pattern matcher is fairly unreliable from observations during
 lab work.
\end_layout

\begin_layout Section
Circular Buffer FIR Filter
\end_layout

\begin_layout Subsection
Naive Implementation
\end_layout

\begin_layout Standard
A simple version of the circular buffer was first implemented to ensure
 that it worked correctly.
 The code listing can be found in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Naive-Implementation-for"

\end_inset

.
 Its operations are explained in the next section.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Code-Description"

\end_inset

Code Description
\end_layout

\begin_layout Standard
A variable 
\begin_inset Quotes eld
\end_inset


\family typewriter
index
\family default

\begin_inset Quotes erd
\end_inset

 is used to indicate the position in the array at which the 
\begin_inset Quotes eld
\end_inset

current
\begin_inset Quotes erd
\end_inset

 sample should reside.
 This 
\family typewriter
index
\family default
 is incremented after every new sample is obtained, eventually wrapping
 around to the front of the array.
 Thus, if the current index is of value 
\begin_inset Formula $i$
\end_inset

, then the previous nth sample will be given by the index value of 
\begin_inset Formula $[(i-n)+N]\%N$
\end_inset

 where 
\begin_inset Formula $N=88$
\end_inset

 is the total number of coefficients.
 The array, and 
\family typewriter
index
\family default
 are defined by
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Int16 buffer[N] = {0}; // initialise everything to zero
\end_layout

\begin_layout Plain Layout

int index = 0;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The newly retrieved sample will first be written to the buffer.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

*(buffer + index) = input; // equivalent to, and no faster than writing
 buffer[index] = input
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A loop is then started to perform the Multiply and Accumulate (MAC) operation
 and the result is stored in 
\family typewriter
result
\family default
.
 Proper circular offset buffering is calculated using the method described
 earlier in this section.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

for (i = 0; i < N; i++)
\end_layout

\begin_layout Plain Layout

	result += b[i]* buffer[ ((index-i) + N) % N];
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The index is then incremented.
 The mod operator ensures that proper wrapping around occurs.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

index = (index + 1)%N;
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Code Performance
\end_layout

\begin_layout Standard
The number of cycles taken between the start, and the end of the ISR routine
 is given in the table below.
 In general, this implementation of the buffer performed worse than the
 Non-Circular buffer version described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sec:Non-Circular-Buffer-FIR"

\end_inset

.
 This is due to the compiler no longer seeing the trigger patterns for optimised
 template loops.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Optimisation Level
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Cycle count 
\bar under
with 
\bar default
read/write overheads
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7377
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
o0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5830
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
o2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3934
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Optimised Implementation
\end_layout

\begin_layout Standard
The code listing for the optimised implementation can be found in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Optimised-Circular-Buffer"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Code Operation
\end_layout

\begin_layout Standard
Similar to the code operation described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Code-Description"

\end_inset

, a variable 
\begin_inset Quotes eld
\end_inset


\family typewriter
index
\family default

\begin_inset Quotes erd
\end_inset

 is used to indicate the position in the array at which the 
\begin_inset Quotes eld
\end_inset

current
\begin_inset Quotes erd
\end_inset

 sample should reside.
 This 
\family typewriter
index
\family default
 is decremented after every new sample is obtained, eventually wrapping
 around.
\end_layout

\begin_layout Standard
The optimised circular buffer code starts with the following pointer declaration
s for buffer indexing/walks:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

double* coeffptr = b;
\end_layout

\begin_layout Plain Layout

double* coeffEndptr = b + N; // points to the element AFTER the coefficient
 array 	
\end_layout

\begin_layout Plain Layout

double* bufferEndptr = buffer + N; // one after last element
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It is important to note that all of these values are compile time constants
 and are thus 
\begin_inset Quotes eld
\end_inset

free
\begin_inset Quotes erd
\end_inset

 in terms of performance.
\end_layout

\begin_layout Standard
The code proceeds to declare the pointer to the oldest sample (to be overwritten
 by the new sample) and calculate the amount of entries there are between
 current sample and the end of the sample buffer (the MAC will be two part,
 first part walking the sample buffer forwards, so this is the loop counter
 for the forward walk).
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

double* sampleptr = buffer + index; // point to oldest sample initially
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int loopcnt = bufferEndptr - sampleptr; // how many iterations are needed
 for a single-step loop
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As the MAC loops will be manually unrolled 4 times in C (reasoning below),
 we also need to calculate how much misalignment there is for MAC loop iteration
s, to be handled separately after the first MAC loop.
 In addition, four accumulators are declared.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

char modunroll = loopcnt % 4; // non-integral leftover of an unrolled loop
 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// accumulators 	
\end_layout

\begin_layout Plain Layout

double result = 0; 	
\end_layout

\begin_layout Plain Layout

double result2 = 0; 	
\end_layout

\begin_layout Plain Layout

double result3 = 0; 	
\end_layout

\begin_layout Plain Layout

double result4 = 0;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Then, the sample is read into the correct part of the circular buffer:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

*sampleptr = mono_read_16Bit();	// read sample into buffer
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Then the code drops into a 4-unrolled MAC loop that steps the buffers in
 the forwards direction until it hits the end of the sample buffer (can
 be a range of values since this is a circular buffer).
 Afterwards, the non-integral case is handled for one, two or three leftover
 values.
 Note that the loop count is known at the start of the 
\family typewriter
ISR
\family default
 and thus the compiler will turn the condition check into a simple loop
 counter, which is the optimal solution.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// process samples until the end of the sample buffer is hit
\end_layout

\begin_layout Plain Layout

while(sampleptr < bufferEndptr-3)
\end_layout

\begin_layout Plain Layout

{ 		
\end_layout

\begin_layout Plain Layout

	result += (*coeffptr++) * (*sampleptr++);
\end_layout

\begin_layout Plain Layout

	result2 += (*coeffptr++) * (*sampleptr++);
\end_layout

\begin_layout Plain Layout

	result3 += (*coeffptr++) * (*sampleptr++);
\end_layout

\begin_layout Plain Layout

	result4 += (*coeffptr++) * (*sampleptr++); 	
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

// take care of non-integral leftover iterations
\end_layout

\begin_layout Plain Layout

if (modunroll>0) result += (*coeffptr++) * (*sampleptr++); 	
\end_layout

\begin_layout Plain Layout

if (modunroll>1) result2 += (*coeffptr++) * (*sampleptr++); 	
\end_layout

\begin_layout Plain Layout

if (modunroll>2) result3 += (*coeffptr++) * (*sampleptr++);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Then we reset the sample pointer to the start of the sample buffer, effectively
 wrapping it around and do another pass of the MAC for the remainder of
 the FIR operation.
 Note that the difference between the current coefficient pointer and the
 end of the coefficient buffer is the required amount of iterations.
 This is also turned into a simple loop counter by the compiler.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sampleptr = buffer; // wrap pointer to beginning of the buffer
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// pass the remainder of the buffer (amount of iterations = how many coefficient
s there are left to process)     
\end_layout

\begin_layout Plain Layout

while (coeffptr < coeffEndptr-3)     
\end_layout

\begin_layout Plain Layout

{     	
\end_layout

\begin_layout Plain Layout

	result += (*coeffptr++) * (*sampleptr++);
\end_layout

\begin_layout Plain Layout

	result2 += (*coeffptr++) * (*sampleptr++);
\end_layout

\begin_layout Plain Layout

	result3 += (*coeffptr++) * (*sampleptr++);
\end_layout

\begin_layout Plain Layout

	result4 += (*coeffptr++) * (*sampleptr++);     
\end_layout

\begin_layout Plain Layout

}          
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// take care of non-integral leftover iterations if (modunroll==1) result
 += (*coeffptr++) * (*sampleptr++); 	
\end_layout

\begin_layout Plain Layout

if (modunroll==1 || modunroll==2) result2 += (*coeffptr++) * (*sampleptr++);
 	
\end_layout

\begin_layout Plain Layout

if (modunroll==1 || modunroll==2 || modunroll==3) result3 += (*coeffptr++)
 * (*sampleptr++);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The wrapup part of the code does the final accumulation of partial accumulators,
 stepping the index and writing the resulting sample to the codec.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// sum the accumulators     
\end_layout

\begin_layout Plain Layout

result = result + result2 + result3 + result4;       
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// advance index into circular buffer 	
\end_layout

\begin_layout Plain Layout

index = (index == 0) ? N-1 : index-1; 
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

mono_write_16Bit(result);	// output sample
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The reason for unrolling the loop four times is as follows (all with 
\family typewriter
o2/o3 
\family default
optimisation settings): 
\end_layout

\begin_layout Itemize
with one accumulator, the compiler was not noticing the possible software
 pipelining of the results and was limited by serial writes to one accumulator.
\end_layout

\begin_layout Itemize
with two accumulators, the compiler notices that it can use both sides of
 the processor.
 But there are still several nop cycles.
\end_layout

\begin_layout Itemize
with four accumulators, the compiler is able to unroll its generated loop
 an extra time to remove amount of nop cycles.
\end_layout

\begin_layout Subsubsection
Code Performance
\end_layout

\begin_layout Standard
With four manual loop unrolls to use as hints for the compiler and 
\family typewriter
o2/o3
\family default
 compiler setting, the C version can be pushed to 422 cycles for the entire
 ISR.

\bar under
 
\bar default
From our measurements, we estimate the read/write overheads for the samples
 to be around 130 cycles at o2/o3, therefore we 
\bar under
estimate that the actual optimised C version FIR pass is 192 cycles
\bar default
.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Optimisation Level
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Est.
 Cycle count 
\bar under
without
\bar default
 sample overheads
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Cycle count 
\bar under
with 
\bar default
read/write overheads
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
none
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3042
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3172
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
o1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1842
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1972
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
o2/o3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
192
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
422
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Note that this code's performance at a high level of optimisation is very
 impressive, the C code is structured to take advantage of the compiler's
 pattern matcher to utilise the tight mac loops and automatic unrolling.
 
\end_layout

\begin_layout Standard
Potentially we could improve the code further to take advantage of the coefficie
nt symmetry to reduce the amount of loads by a quarter and halve the amount
 of multiplications.
 However, at C level, the compiler could not pick up on the possible software
 pipelining in practice.
 Software pipelining will be discussed in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Optimisation-Techniques"

\end_inset

.
\end_layout

\begin_layout Standard
Another possible optimisation path would be to change the filter, while
 keeping it conformant to the spec, to have a significant amount of zero
 coefficients, which could be handled very quickly by the code.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Spectrum-Analyser-Output"

\end_inset

Spectrum Analyser Output
\end_layout

\begin_layout Standard
The output for the spectrum analyser is given in the figures below.
 Due to the input being fed to only one channel on the DSP, along with the
 potential divider in the circuitry, the value 
\begin_inset Quotes eld
\end_inset

seen
\begin_inset Quotes erd
\end_inset

 by the DSP will be one-fourth of what was provided by the analyser.
 This leads to an approximate -12 dB gain for the output in the frequency
 response.
 The figures given below have the necessary offset to reflect this.
 
\end_layout

\begin_layout Standard
The phase is observed to still be linear on hardware, but it is important
 to note that the overall change in the roughly 300 Hz to 2500 Hz range
 is 140 radians.
 This is more than the 70 radians change we observed in the Matlab plots,
 meaning that the slope of the phase response is steeper.
 
\end_layout

\begin_layout Standard
The relationship between the phase response
\begin_inset Formula $\phi(\omega)$
\end_inset

, and the group delay 
\begin_inset Formula $\tau_{g}(\omega)$
\end_inset

 is given by
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\tau_{g}(\omega)=-\frac{d\phi(\omega)}{d\omega}
\]

\end_inset


\end_layout

\begin_layout Standard
Thus, a higher group delay will contribute to a steeper phase response,
 which was observed.
 This means that the hardware filter has a higher group delay, which can
 be attributed to the delay in the codec buffers.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Measurement/circular-trace.png
	scale 50

\end_inset


\end_layout

\begin_layout Section
Assembly Implementation
\end_layout

\begin_layout Standard
An implementation of the MAC operation was done in assembly.
 The code for the C file that calls the assembly function is given in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:C-File"

\end_inset

.
 The ISR routine simply reads the sample from the output, calls the assembly
 function and writes the output.
 A buffer size of 1024 bytes was used.
 This is because there are 88 entries in the buffer, and 88 entries require
 
\begin_inset Formula $88\times\frac{64}{8}=704$
\end_inset

 bytes of space.
 When rounded up to the nearest power of two, we get 1024.
 
\end_layout

\begin_layout Standard
Two versions of the assembly function were implemented, and will be detailed
 later in this section.
\end_layout

\begin_layout Subsection
Linear Implementation
\end_layout

\begin_layout Standard
An assembly implementation of the MAC operation without any parallelism
 was implemented to test the output.
 
\end_layout

\begin_layout Standard
The code listing can be found in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Linear-Assembly-Implementation"

\end_inset

.
 In the comments to the code, the numbers in brackets after the code indicate
 the number of delay slots required after the instruction is sent to 
\family typewriter
E1
\family default
 stage of the pipeline before its results can be used.
 For floating point instructions, a second number will indicate the number
 of latency cycles after the 
\family typewriter
E1
\family default
 stage of the pipeline before the functional unit can execute another instructio
n.
\end_layout

\begin_layout Subsubsection
Code Operation
\end_layout

\begin_layout Standard
The structure of the code before, and after the MAC loop is generally the
 same as the assembly code provided.
 The 
\family typewriter
AMR
\family default
 register is set to have a value of 
\family typewriter
0x90004
\family default
, which sets the register 
\family typewriter
A5 
\family default
to use circular buffering with a block size of 1024 bytes.
 The MAC loop then simply consists of code to load the sample data and the
 coefficients, multiply them together, and finally add them to an accumulator.
 The straightforward loop code is given below:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={[x86masm]Assembler},morekeywords={MVC, MVK, MVKLH, LDDW, LDW, STW, ZERO, MV, SUB, B, MPYDP, ADDDP}"
inline false
status open

\begin_layout Plain Layout

    LDDW .D1		*A5++, A11:A10 ; (4) loads the (delayed) sample into A11:A10,
 and post increment pointer	
\end_layout

\begin_layout Plain Layout

||  LDDW .D2		*B4++, B11:B10 ; (4) load the coefficient into B11:B10, and
 post increment pointer
\end_layout

\begin_layout Plain Layout

    NOP	4 		
\end_layout

\begin_layout Plain Layout

    MPYDP .M1X		A11:A10, B11:B10, A11:A10	; (9, 4) DP multiply 		
\end_layout

\begin_layout Plain Layout

    NOP 9 		
\end_layout

\begin_layout Plain Layout

    ADDDP .L1		A15:A14, A11:A10, A15:A14	; (6, 2) DP ADD 		
\end_layout

\begin_layout Plain Layout

    NOP 6
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the first execute packet of the loop, the coefficient and the sample
 are loaded into their respective registers (
\family typewriter
A11:A10
\family default
, and 
\family typewriter
B11:B10
\family default
) in parallel using the
\family typewriter
 D
\family default
 units on both sides.
 4 delay slots are required before the results can be used.
 The values are then multiplied using the 
\family typewriter
MPYDP
\family default
 instruction, which uses the 
\family typewriter
M1
\family default
 unit, and utilises the cross path (thus the 
\family typewriter
.M1X
\family default
).
 9 delay slots are required before the results are added using 
\family typewriter
ADDDP
\family default
.
 Then, a further six delay slots are required before the loop begins again.
\end_layout

\begin_layout Subsubsection
Code Performance
\end_layout

\begin_layout Standard
The number of cycles taken between the start, and the end of the ISR routine
 is given in the table below.
 The number given is the lowest number of clock cycles observed.
 The C code in this case do not change much through the various optimisation
 level.
 This is because the compiler does not optimise the assembly code, and the
 assembly code has a constant number of clock cycles (including the five
 
\family typewriter
NOPs
\family default
 after the branch back to C).
 This linear and straightforward implementation of the MAC operation in
 assembly actually performs worse than the Non-Circular Buffer implemented
 in C at higher levels of optimisation.
 This is because at higher levels of optimisation, the compiler will attempt
 to optimise using techniques such as software pipelining.
 This will be further discussed in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sec:Compiler-Optimisation"

\end_inset

.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Optimisation Level
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of Clock Cycles
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Assembly Code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2736
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2594
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
o0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2736
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
o2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2730
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Optimised Implementation
\end_layout

\begin_layout Standard
Various techniques can be employed to optimise the assembler code and shave
 the number of cycles required by five times.
 The techniques will be described in this section.
 The code listing can be found in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Optimised-Assembly-Implementatio"

\end_inset

.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Optimisation-Techniques"

\end_inset

Optimisation Techniques
\end_layout

\begin_layout Standard
There are various techniques that can be employed to take advantage of the
 VLIW architecture of the DSP hardware.
 This mostly include exploiting the ability to schedule multiple instructions
 that utilise different functional units to be executed in parallel, and
 also to understand how the pipeline works for the various instructions
 so as to interleave instructions.
 Some of the techniques used by the compiler (described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sec:Compiler-Optimisation"

\end_inset

) are also used.
 
\end_layout

\begin_layout Standard
Double precision (DP) instructions are the first area for optimisation.
 The delay slots between two consecutive DP instructions where the second
 instruction makes use of the result from the first instruction could be
 reduced by one (for example 
\family typewriter
MPYDP
\family default
 followed by 
\family typewriter
ADDDP
\family default
).
 This is because the DP instructions write the lower half of the results
 to the register first, before writing the upper half of the results to
 the register in the final delay slot.
 DP instructions that read the lower half results first in 
\family typewriter
E1,
\family default
 followed by the upper half in 
\family typewriter
E2
\family default
 can be scheduled to start executing in the final delay slot of the previous
 DP instruction.
 Thus, the number of delay slots between 
\family typewriter
MPYDP
\family default
 followed by 
\family typewriter
ADDDP
\family default
 can be reduced from 9 to 8.
\end_layout

\begin_layout Standard
Utilising multiple functional units on both sides is the second area for
 optimisation.
 This works, so long as the operations do not write to the same registers
 in the same cycle.
 There is also a need to be careful to not read more than four registers
 in the same register file in the same execute packet.
 Thus, two 
\family typewriter
MPYDP
\family default
 and 
\family typewriter
ADDDP
\family default
 operations can take place in parallel utilising both of the functional
 units.
 This can roughly half the number of cycles required for the code to run,
 but does, however, require twice the number of registers required.
\end_layout

\begin_layout Standard
Software pipelining for loops is the third area for optimisation.
 Software pipelining is analogous to hardware pipelining where multiple
 instructions are interleaved so that the functional units can be maximally
 utilised during their delay slots, subject to their latencies, if any.
 Software pipelining, along with loop unrolling are techniques used by compilers
 to optimise code.
 In software pipelining, the pipeline is first primed using a pipeline prologue.
 The main loop kernel is then executed for the required number of times,
 with several loop cycles unrolled to execute interleaved.
 Then, the loop epilogue will finish up any outstanding tasks.
 This technique can roughly reduce the number of cycles by a factor roughly
 equivalent to the number of times the loop is unrolled, but requires proper
 planning and tracking.
\end_layout

\begin_layout Standard
Finally, taking advantage of the branch delay slots can also reduce the
 numbers of cycles in a non-trivial manner.
 The branch instruction requires five delay slots afterwards, whether the
 branch is taken or not.
 Those five execute packets are guaranteed to execute, and thus code can
 be executed during those execute packets.
 
\end_layout

\begin_layout Standard
These techniques are employed in the code implementation, to be explained
 later on in this section.
\end_layout

\begin_layout Subsubsection
Code Operation
\end_layout

\begin_layout Standard
The register usage is described in the comments in the listing in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Optimised-Assembly-Implementatio"

\end_inset

.
 Where possible (restricted by the number of functional units available,
 and the avoidance of hazards due to dependencies), operations are run in
 parallel.
\end_layout

\begin_layout Standard
The assembly function first starts off by setting the AMR register is set
 to have a value of 
\family typewriter
0x90004
\family default
, which sets the register 
\family typewriter
A5 
\family default
to use circular buffering with a block size of 1024 bytes.
 At the same time, we save some of the values in registers we are going
 to use later onto the stack using the Stack Pointer 
\family typewriter
B15
\family default
.
 The address pointer for the sample that was just read is dereferenced,
 along with the address of the circular buffer.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={[x86masm]Assembler},morekeywords={MVC, MVK, MVKLH, LDDW, LDW, STW, ZERO, MV, SUB, B, MPYDP, ADDDP}"
inline false
status open

\begin_layout Plain Layout

        MVC.S2            AMR,B13        ;(0) Save contents of AMR reg to
 B13
\end_layout

\begin_layout Plain Layout

    ||  STW .D2           B3, *++B15    ; (0) save return to C to stack
\end_layout

\begin_layout Plain Layout

    ||  LDDW.D1           *A6,A11:A10    ;(4) Get the 32 bit data for read_samp
 put it in A11:A10 
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

        STW .D2           B6, *++B15    ; (0) save &filtered_samp to stack
\end_layout

\begin_layout Plain Layout

    ||  MVK .S2           4H,B2         ;(0)Set AMR to allow A5 to be used
 for circular addressing with BK0
\end_layout

\begin_layout Plain Layout

    ||  LDW .D1           *A4,A5        ;(4) Get the address of the circ_ptr,
 dereference then place in A5
\end_layout

\begin_layout Plain Layout

        MVKLH .S2         9H,B2         ;(0)Set BK0 to allow for 1024 bytes
 addressing
\end_layout

\begin_layout Plain Layout

        MVC.S2            B2,AMR        ;(0) set AMR reg
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

        NOP 2                        ; A5 now holds address pointing into
 delay_circ		; set circular mode using the AMR
\end_layout

\begin_layout Plain Layout

		MVC .S2			AMR,B13		;(0) Save contents of AMR reg to B13
\end_layout

\begin_layout Plain Layout

		MVK .S2			4H,B2 		;(0) Lower half.
 set A5 to be circular buffering addressing mode using BK0
\end_layout

\begin_layout Plain Layout

		MVKLH .S2		9H,B2 		;(0) Upper half.
 Set BK0 to work for 1024 bytes
\end_layout

\begin_layout Plain Layout

		MVC .S2			B2,AMR		;(0) set AMR reg 
\end_layout

\begin_layout Plain Layout

        NOP 2                        ; A5 now holds address pointing into
 delay_circ
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Next, the sample that was just read is written into the appropriate address
 in memory (the circular buffer), and the registers used for accumulations
 are 
\family typewriter
ZERO
\family default
ed.
 The address for the next execution of the convolution function to write
 the new sample to is written back to memory.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

        STW .D1           A11,*--A5    ;(0) Store new input sample (MSB)
 to delay_circ array
\end_layout

\begin_layout Plain Layout

    ||  ZERO .S1          A1            ;(0) zero accumulator LSB
\end_layout

\begin_layout Plain Layout

    ||  ZERO .S2          B3
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

        STW .D1           A10,*--A5     ;(0) Store new input sample (LSB)
 to delay_circ array   
\end_layout

\begin_layout Plain Layout

    ||  ZERO.S1           A0            ;(0) zero accumulator MSB
\end_layout

\begin_layout Plain Layout

    ||  ZERO .S2          B2
\end_layout

\begin_layout Plain Layout

        STW.D1            A5,*A4    ;(0) write back the decremented pointer
 to circ_ptr
\end_layout

\begin_layout Plain Layout

                                    ; this points to the end of the MSB
 of where the next sample
\end_layout

\begin_layout Plain Layout

                                    ; will be stored on the next call to
 this function 
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Pipeline Description
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="25">
<features rotate="true" tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Cycle
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
18
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
22
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
23
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
24
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
B1
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
By end of loop
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Loop
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LA1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\times$
\end_inset

A1 & LA3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+A1 & 
\begin_inset Formula $\times$
\end_inset

A3 & LA5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LA2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\times$
\end_inset

A2 & LA4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+A2 & 
\begin_inset Formula $\times$
\end_inset

A4 & LA6
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
B1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LB1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\times$
\end_inset

B1 & LB3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+B1 & 
\begin_inset Formula $\times$
\end_inset

B3 & LB5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
B2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LB2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\times$
\end_inset

B2 & LB4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+B2 & 
\begin_inset Formula $\times$
\end_inset

B4 & LB6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
Legend:
\end_layout

\begin_layout Itemize

\family sans
Numbers: The ith MAC iteration involving the ith sample and coefficient
\end_layout

\begin_layout Itemize

\family sans
A & B - The operations involving the M and L units on side A and B respectively.
 Note that loads use both sides.
\end_layout

\begin_layout Itemize

\family sans
L - Load operation; 
\begin_inset Formula $\times-$
\end_inset

Multiplication operation; + - Addition operation
\end_layout

\begin_layout Itemize

\family sans
So +B2 refers to the second sample being accumulated (added) on the B side.
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Pipeline-description-at"

\end_inset

Pipeline description at the beginning of the loop.
 Cycles without any effect on the MAC operation are excluded
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The loop prologue, described in as part of the software pipeline is then
 primed to load the first two sets of sample values and coefficients into
 the respective registers so as to perform two MAC operations in parallel
 to separate accumulators.
 The 
\family typewriter
LDDW
\family default
 instructions for each pair of values are loaded in the same execute packet,
 and the next pair of values are loaded in the subsequent execute packet.
 The instruction requires four delays slots before the registers are fully
 written.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={[x86masm]Assembler},morekeywords={MVC, MVK, MVKLH, LDDW, LDW, STW, ZERO, MV, SUB, B, MPYDP, ADDDP}"
inline false
status open

\begin_layout Plain Layout

        ;********************************** loop prologue **********************
************
\end_layout

\begin_layout Plain Layout

        ; prime the pipeline
\end_layout

\begin_layout Plain Layout

       LDDW .D1          *A5++, A9:A8 ; (4) loads the (delayed) sample into
 A9:A8, and post increment pointer 
\end_layout

\begin_layout Plain Layout

   ||  LDDW .D2          *B4++, B9:B8 ; (4) load the coefficient into B9:B8,
 and post increment pointer 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

       LDDW .D1          *A5++, A11:A10 ; (4) loads the (delayed) sample
 into A11:A10, and post increment pointer
\end_layout

\begin_layout Plain Layout

   ||  LDDW .D2          *B4++, B11:B10 ; (4) load the coefficient into B11:B10,
 and post increment pointer 
\end_layout

\begin_layout Plain Layout

       NOP 4
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The loop kernel is then executed next.
 The loop kernel will be executed 
\begin_inset Formula $N$
\end_inset

 number of times, where 
\begin_inset Formula $N$
\end_inset

 is the number of coefficients provided by the caller in C.
 In one execute packet, the kernel first attempts to multiply the two pairs
 of values loaded in the previous loop cycle (or in the loop prologue).
 It also performs a decrement of the loop counter by two.
 The 
\family typewriter
MPYDP
\family default
 requires 8 delay slots (one less than 9, as described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Optimisation-Techniques"

\end_inset

).
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={[x86masm]Assembler},morekeywords={MVC, MVK, MVKLH, LDDW, LDW, STW, ZERO, MV, SUB, B, MPYDP, ADDDP}"
inline false
status open

\begin_layout Plain Layout

        ; ************************* loop kernel     ****************************
 
\end_layout

\begin_layout Plain Layout

       MPYDP .M1X        A9:A8, B9:B8, A3:A2    ; (9, 4) DP multiply 
\end_layout

\begin_layout Plain Layout

   ||  MPYDP .M2X        B11:B10, A11:A10, B7:B6    ; (9, 4) DP multiply
 
\end_layout

\begin_layout Plain Layout

   ||  SUB .S2           B0,2,B0            ; (0) b0 - 2 -> b0    
\end_layout

\end_inset


\end_layout

\begin_layout Standard
After three execute packets with 
\family typewriter
NOPs
\family default
, there are exactly five execute packets in the kernel, and thus the conditional
 branch instruction is executed.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={[x86masm]Assembler},morekeywords={MVC, MVK, MVKLH, LDDW, LDW, STW, ZERO, MV, SUB, B, MPYDP, ADDDP}"
inline false
status open

\begin_layout Plain Layout

        NOP 3
\end_layout

\begin_layout Plain Layout

        [B0] B .S2             loop            ; (5) loop back if b0 is not
 zero
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The next two pairs of values are then loaded.
 These 
\family typewriter
LDDW
\family default
 instructions can actually be scheduled in the execute packet right after
 the 
\family typewriter
MPYDP
\family default
 instruction as they write to the registers only on the fourth delay slot,
 but doing so would not change the number of cycles as the 
\family typewriter
MPYDP
\family default
 still needs 8 delay slots.
 The delay slot requirements of these 
\family typewriter
LDDW
\family default
 instructions will be met by the time the values are used again in the next
\family typewriter
MPYDP 
\family default
instructions.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={[x86masm]Assembler},morekeywords={MVC, MVK, MVKLH, LDDW, LDW, STW, ZERO, MV, SUB, B, MPYDP, ADDDP}"
inline false
status open

\begin_layout Plain Layout

   ||  [B0] LDDW .D1     *A5++, A9:A8 ; (4) loads the (delayed) sample into
 A9:A8, and post increment pointer 
\end_layout

\begin_layout Plain Layout

   ||  [B0] LDDW .D2     *B4++, B9:B8 ; (4) load the coefficient into B9:B8,
 and post increment pointer 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

       [B0] LDDW .D1     *A5++, A11:A10 ; (4) loads the (delayed) sample
 into A11:A10, and post increment pointer 
\end_layout

\begin_layout Plain Layout

   ||  [B0] LDDW .D2     *B4++, B11:B10 ; (4) load the coefficient into B11:B10,
 and post increment pointer
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Three more 
\family typewriter
NOPs
\family default
 are then performed to meet 
\family typewriter
MPYDP's
\family default
 delay slots requirement, and then the various accumulators are added.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={[x86masm]Assembler},morekeywords={MVC, MVK, MVKLH, LDDW, LDW, STW, ZERO, MV, SUB, B, MPYDP, ADDDP}"
inline false
status open

\begin_layout Plain Layout

       ADDDP .L1         A1:A0, A3:A2, A1:A0    ; (6, 2) DP ADD 
\end_layout

\begin_layout Plain Layout

   ||  ADDDP .L2         B3:B2, B7:B6, B3:B2    ; (6, 2) DP ADD    
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The epilogue of the loop is now performed.
 Five delay slots (one less than required, with similar reasons as 
\family typewriter
MPYDP
\family default
) are inserted for the final 
\family typewriter
ADDDP
\family default
 instruction to complete execution before adding the two accumulators up.
 Five delay slots are needed for this 
\family typewriter
ADDDP
\family default
 to complete.
 This is, again, one less than required because the lower half of the result
 will be used first later on.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={[x86masm]Assembler},morekeywords={MVC, MVK, MVKLH, LDDW, LDW, STW, ZERO, MV, SUB, B, MPYDP, ADDDP}"
inline false
status open

\begin_layout Plain Layout

        ;********************************** loop epilogue **********************
************
\end_layout

\begin_layout Plain Layout

        ; add both accumulators up
\end_layout

\begin_layout Plain Layout

        NOP 5        ; for the final addition to be complete
\end_layout

\begin_layout Plain Layout

        ADDDP .L1X        A1:A0, B3:B2, A1:A0    ; (6, 2) DP ADD
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Taking advantage of the five delay slots after a branch, the branch back
 to C instruction is executed while the results of the MAC is written back
 to C and the previous 
\family typewriter
AMR
\family default
 register value is restored.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={[x86masm]Assembler},morekeywords={MVC, MVK, MVKLH, LDDW, LDW, STW, ZERO, MV, SUB, B, MPYDP, ADDDP}"
inline false
status open

\begin_layout Plain Layout

        NOP 
\end_layout

\begin_layout Plain Layout

        ; return to C code     
\end_layout

\begin_layout Plain Layout

lend:   B .S2             B1            ; (5) branch to b1 (moved C return
 address) 	
\end_layout

\begin_layout Plain Layout

        NOP 3                  ; send the result of MAC back to C
\end_layout

\begin_layout Plain Layout

        STW .D2            A0,*B5        ;(0) Write accumulator (LSB) into
 filtered_samp          
\end_layout

\begin_layout Plain Layout

        STW .D2            A1,*+B5[1]    ;(0) Write accumulator (MSB) into
 filtered_samp                   
\end_layout

\begin_layout Plain Layout

        ; restore previous buffering mode
\end_layout

\begin_layout Plain Layout

    ||  MVC .S2            B13,AMR        ;(0) restore  AMR reg to previous
 contents
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It should be noted that with this optimisation, the number of coefficients,
 
\begin_inset Formula $N$
\end_inset

, 
\series bold
MUST 
\series default
be a multiple of four.
 If the number of coefficients is not a multiple of four, additional coefficient
s with values of zero should be added to make 
\begin_inset Formula $N$
\end_inset

 a multiple of four.
 Otherwise, the code will compute the result wrongly.
\end_layout

\begin_layout Subsubsection
Code Performance
\end_layout

\begin_layout Standard
The number of cycles taken between the start, and the end of the ISR routine
 is given in the table below.
 The number given is the lowest number of clock cycles observed.
 The number might vary due to cache hits and/or misses.
 The C code in this case do not change much through the various optimisation
 level.
 This is because the compiler does not optimise the assembly code, and the
 assembly code has a constant number of clock cycles.
 The optimisation technique discussed in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Optimisation-Techniques"

\end_inset

 provide massive improvement to the code performance, by five fold.
 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Optimisation Level
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of Clock Cycles
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Assembly Code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
378
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
239
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
o0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
378
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
o2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
378
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Spectrum Analyser Traces
\end_layout

\begin_layout Standard
The output for the spectrum analyser is given below.
 As before, the -12 dB offset that occurs has been corrected in the trace
 below.
 The group delay that can be observed from the phase response is explained
 as before, from 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Spectrum-Analyser-Output"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Measurement/asm-trace.png
	scale 50

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Compiler-Optimisation"

\end_inset

Compiler Optimisation
\end_layout

\begin_layout Standard
The various optimisations performed by the compiler are described in the
 
\family typewriter
SPRU187O
\begin_inset Foot
status open

\begin_layout Plain Layout

\family typewriter
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.ti.com/general/docs/lit/getliterature.tsp?literatureNumber=spru187o&file
Type=pdf
\end_layout

\end_inset


\end_layout

\end_inset


\family default
 document.
 Optimisation might result in a larger code size.
 The various clock cycles required for the different levels of optimisations
 from previous sections are copied in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:Comparison-of-the"

\end_inset

, for comparison.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Optimisation Level
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Non-circular Buffer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Optimised Circular Buffer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5825
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4526
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Level 0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4829
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2898
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Level 2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1719
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
746
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Comparison-of-the"

\end_inset

Comparison of the performance of the code at various compiler optimisation
 levels.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
When no optimisation is done, the compiler generally generates assembly
 code 
\begin_inset Quotes eld
\end_inset

as-is
\begin_inset Quotes erd
\end_inset

 with no optimisation done to the code.
 This usually results in the fastest compilation time, and is easiest to
 debug (but with performance trade-off.).
 The section will examine the various optimisation performed by the compiler
 at various levels and examine how they could contribute to the increase
 in performance seen in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:Comparison-of-the"

\end_inset

.
\end_layout

\begin_layout Subsection
Level 0 Optimisation
\end_layout

\begin_layout Standard
As can be seen from 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:Comparison-of-the"

\end_inset

, level 0 results in some improvements in code performance (although not
 as drastic as level 2), with the non-circular and circular buffer achieving
 17.1% and 36.0% improvement respectively.
 
\end_layout

\begin_layout Standard
The compiler will attempt to simplify the control-flow-graph (i.e.
 
\family typewriter
if/else, for, switch
\family default
 etc.
 statements).
 The code for both the different implementations do not use as much of these
 control statements, and thus not much improvement will arise from there.
 The compiler will also attempt to eliminate unused code, which is not present
 in both implementations.
 Next, the compiler will attempt to simplify statements and expressions.
 The implementations do not generally contain overly complicated expressions,
 and statements.
 However, the following statements contain expressions that always evaluate
 to the same constant values, and the compiler might attempt to 
\begin_inset Quotes eld
\end_inset

collapse
\begin_inset Quotes erd
\end_inset

 them into a constant value at compile-time, rather than ask them to be
 computed at run-time.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// from non-circular buffer
\end_layout

\begin_layout Plain Layout

i = N-1;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// from circular buffer
\end_layout

\begin_layout Plain Layout

double *bEnd = b + N;
\end_layout

\begin_layout Plain Layout

double *bufferEnd = buffer + N
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The compiler will also attempt to inline functions marked with the keyword
 
\family typewriter
inline
\family default
.
 However, the keyword was not used in both implementations.
 The compiler will assign variables to registers, reducing the amount of
 memory access.
 This might have contributed a significant amount of code performance improvemen
ts to both implementation.
 It is likely that the circular buffer implementation benefited more from
 this optimisation, due to its use of pointers, which would have resulted
 in unnecessary amounts of dereferencing of pointers to pointers) .
\end_layout

\begin_layout Standard
Finally, the compiler will attempt to perform loop rotation (or loop inversion)
\begin_inset Foot
status open

\begin_layout Plain Layout
See 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://llvm.org/devmtg/2009-10/ScalarEvolutionAndLoopOptimization.pdf
\end_layout

\end_inset

 and 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://en.wikipedia.org/wiki/Loop_inversion
\end_layout

\end_inset


\end_layout

\end_inset

.
 Consider the following 
\family typewriter
for
\family default
 loop in C code which will be transformed (essentially) by the compiler
 into an equivalent 
\family typewriter
while
\family default
 loop in assembly.
 This results in two branches being run continually in a loop, and branches,
 whether taken or not, could lead to pipeline stalls (or in this architecture
 additional 
\family typewriter
NOPs
\family default
 being inserted, which are wasteful if not optimised properly).
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

for (i = ; i < N; ++i) doSomething(); 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// transformed into
\end_layout

\begin_layout Plain Layout

i = 0;
\end_layout

\begin_layout Plain Layout

while (i < N) { // conditional branch to after end of loop if i >= N
\end_layout

\begin_layout Plain Layout

	doSomething();
\end_layout

\begin_layout Plain Layout

	++i;
\end_layout

\begin_layout Plain Layout

} // unconditional branch to start of loop
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Loop rotation replaces the whole 
\family typewriter
while
\family default
 block with an if block containing a 
\family typewriter
do..while
\family default
 loop, which reduces the number of branches in the loop to one.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

i = 0;
\end_layout

\begin_layout Plain Layout

if (i < N){ // conditional branch to after end of loop if i >= N OUTSIDE
 the loop
\end_layout

\begin_layout Plain Layout

	do{
\end_layout

\begin_layout Plain Layout

		doSomething();
\end_layout

\begin_layout Plain Layout

		i++;
\end_layout

\begin_layout Plain Layout

	} while (i < N); // conditional branch to beginning of loop if i < N
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This technique contributes a significant improvement in both implementations.
 This technique also enable code that are loop-invariant to be moved out
 of the loop themselves
\begin_inset Foot
status open

\begin_layout Plain Layout
See 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://en.wikipedia.org/wiki/Loop-invariant_code_motion
\end_layout

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Level 2 Optimisation
\end_layout

\begin_layout Standard
Level 2 optimisation performs all the optimisation in Levels 0 and 1.
 The optimisation performed in Level 1 (Performs local copy/constant propagation
, Removes unused assignments , and Eliminates local common expressions)
 are not applicable to the implementations.
 As seen from 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:Comparison-of-the"

\end_inset

, the non-circular and circular buffer implementation saw a 64.4% and 74.3%
 improvement in performance when compared to Level 0 optimisation.
 
\end_layout

\begin_layout Standard
The compiler attempts to perform various loop optimisation such as software
 pipelining and loop unrolling as described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Optimisation-Techniques"

\end_inset

.
 These optimisations contribute the most to the improvement in performance,
 seeing that most of the code is spent in loops.
 
\end_layout

\begin_layout Standard
The compiler also attempts to convert array references in loops to incremented
 pointer form, which was what was done already in the circular buffer implementa
tion.
 In this case, it is the fact that the circular buffer only loops over the
 values once, rather than twice by the non-circular buffer, that gives it
 the performance advantage.
 
\end_layout

\begin_layout Standard
The various global optimisation done by the compiler is not relevant.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
\start_of_appendix
Code Listings
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Matlab-Code-for"

\end_inset

Matlab Code for Filter Generation
\end_layout

\begin_layout Standard
Based on the specification given, the following Matlab code was used to
 generate the filter:
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "lab4.m"
lstparams "language=Matlab"

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Non-circular-buffer"

\end_inset

Non-Circular Buffer
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "RTDSP/non-circular.c"

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Naive-Implementation-for"

\end_inset

Naive Implementation for a Circular Buffer
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "naive-circular.c"

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Optimised-Circular-Buffer"

\end_inset

Optimised Circular Buffer Implementation
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "RTDSP/circular.c"

\end_inset


\end_layout

\begin_layout Subsection
Assembly Implementation
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:C-File"

\end_inset

C File
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "RTDSP/asm.c"

\end_inset


\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Linear-Assembly-Implementation"

\end_inset

Linear Assembly Implementation
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "assembly-linear.asm"
lstparams "language={[x86masm]Assembler},morekeywords={MVC, MVK, MVKLH, LDDW, LDW, STW, ZERO, MV, SUB, B, MPYDP, ADDDP}"

\end_inset


\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Optimised-Assembly-Implementatio"

\end_inset

Optimised Assembly Implementation
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "RTDSP/circ_FIR_DP.asm"
lstparams "language={[x86masm]Assembler},morekeywords={MVC, MVK, MVKLH, LDDW, LDW, STW, ZERO, MV, SUB, B, MPYDP, ADDDP}"

\end_inset


\end_layout

\end_body
\end_document
